NAME
    RT::Authen::ExternalAuth - RT Authentication using External Sources

DESCRIPTION
    A complete package for adding external authentication mechanisms to RT.
    It currently supports LDAP via Net::LDAP and External Database
    authentication for any database with an installed DBI driver.

    It also allows for authenticating cookie information against an external
    database through the use of the RT-Authen-CookieAuth extension.

UPGRADING
    If you are upgrading from an earlier version of this extension, you must
    remove the following files manually:

        $RTHOME/local/plugins/RT-Authen-ExternalAuth/lib/RT/User_Vendor.pm
        $RTHOME/local/lib/RT/User_Vendor.pm
        $RTHOME/local/lib/RT/Authen/External_Auth.pm

    Otherwise you will most likely encounter an error about modifying a read
    only value and be unable to start RT.

    You may not have all of these files. It depends what versions you are
    upgrading between.

    If you are using a vendor packaged RT, your local directories are likely
    to be somewhere under /usr/local instead of in $RTHOME so you will need
    to visit Configuration -> Tools -> System Configuration to find your
    plugin root.

  VERSION NOTES
    If you are using RT 3.6, you want to use the 0.05 version.

    If you are using RT 3.8.0 or 3.8.1, you may have trouble using this due
    to RT bugs related to plugins, but you may be able to use 0.08.

    0.08_02 or later will not work on 3.8.0 or 3.8.1

    If you are using RT 4.0.0 or greater, you must use at least 0.09

MORE ABOUT THIS MODULE
    This module provides the ability to authenticate RT users against one or
    more external data sources at once. It will also allow information about
    that user to be loaded from the same, or any other available, source as
    well as allowing multple redundant servers for each method.

    The extension currently supports authentication and information from
    LDAP via the Net::LDAP module, and from any data source that an
    installed DBI driver is available for.

    It is also possible to use cookies set by an alternate application for
    Single Sign-On (SSO) with that application. For example, you may
    integrate RT with your own website login system so that once users log
    in to your website, they will be automagically logged in to RT when they
    access it.

    It was originally designed and tested against:

    MySQL v4.1.21-standard MySQL v5.0.22 Windows Active Directory v2003

    But it has been designed so that it should work with ANY LDAP service
    and ANY DBI-drivable database, based upon the configuration given in
    your $RTHOME/etc/RT_SiteConfig.pm

    As of v0.08 ExternalAuth also allows you to pull a browser cookie value
    and test it against a DBI data source allowing the use of cookies for
    Single Sign-On (SSO) authentication with another application or website
    login system. This is due to the merging of RT::Authen::ExternalAuth and
    RT::Authen::CookieAuth. For example, you may integrate RT with your own
    website login system so that once users log in to your website, they
    will be automagically logged in to RT when they access it.

INSTALLATION
    To install this module, run the following commands:

        perl Makefile.PL
        make
        make install

    If you are using RT 3.8.x, you need to enable this module by adding
    RT::Authen::ExternalAuth to your @Plugins configuration:

        Set( @Plugins, qw(RT::Authen::ExternalAuth) );

    If you already have a @Plugins line, add RT::Authen::ExternalAuth to the
    existing list. Adding a second @Plugins line will cause interesting
    bugs.

    Once installed, you should view the file:

    3.4/3.6 $RTHOME/local/etc/ExternalAuth/RT_SiteConfig.pm 3.8
    $RTHOME/local/plugins/RT-Authen-ExternalAuth/etc/RT_SiteConfig.pm

    Then use the examples provided to prepare your own custom configuration
    which should be added to your site configuration in
    $RTHOME/etc/RT_SiteConfig.pm

CONFIGURATION
  Generic
   attr_match_list
    The list of RT attributes that uniquely identify a user. It's
    recommended to use 'Name' and 'EmailAddress' to save encountering
    problems later. Example:

        'attr_match_list' => [
            'Name',
            'EmailAddress', 
            'RealName',
            'WorkPhone', 
        ],

   attr_map
    Mapping of RT attributes on to attributes in the external source.
    Example:

        'attr_map' => {
            'Name'         => 'sAMAccountName',
            'EmailAddress' => 'mail',
            'Organization' => 'physicalDeliveryOfficeName',
            'RealName'     => 'cn',
            ...
        },

    Since version 0.10 it's possible to map one RT field to multiple
    external attributes, for example:

        attr_map => {
            EmailAddress => ['mail', 'alias'],
            ...
        },

    Note that only one value is stored in RT. However, the search includes
    all external attributes if the RT field is listed in "attr_match_list".
    On create or update, the entered value is used as long as it's valid.
    Below is an example configuration:

        attr_match_list => ['Name', 'EmailAddress'],
        attr_map => {
            Name         => 'account',
            EmailAddress => ['mail', 'alias'],
            ...
        },

    If the user didn't enter a value then the value stored in the first
    external attribute is used, in the example above 'mail'. In the common
    case of email, if an email comes in from an address matched via an
    'alias' entry, after the match the value in 'mail' will be used for
    EmailAddress. So when mapping LDAP entries to RT, make sure the first
    entry in the array of options to EmailAddress is the one you want RT to
    use internally as the EmailAddress.

   attr_prefix
    In some cases, multiple-value LDAP attributes may have a prefix on the
    values in the LDAP entry. The "attr_prefix" allows you to set values to
    prepend to filter terms before searching. For example, if you want an
    email address to match 'alias' in an LDAP entry that prepends 'other:'
    to the email address, you can do the following:

        attr_prefix => {
            alias => ['other:'],
            ...
        },

    The key must be included in the "attr_map" or it won't be checked. To
    search on an attribute with no value prepended in addition to some
    prepended values, include an empty string '' in the list. The most
    common case for this is the proxyAddresses needing the value 'smtp:'
    prepended, so that happens automatically.

AUTHOR
        Mike Peachey
        Jennic Ltd.
        zordrak@cpan.org
            Various Best Practical Developers

COPYRIGHT AND LICENCE
    Copyright (C) 2008, Jennic Ltd.

    This software is released under version 2 of the GNU General Public
    License. The license is distributed with this package in the LICENSE
    file found in the directory root.

  WorkaroundAutoCreate
    RT has $AutoCreate option in the config. However, up to RT 4.0.0 this
    option is no used when account created by incomming email. This module
    workarounds this problem.

